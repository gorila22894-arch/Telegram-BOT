import os
import logging
import requests
import pandas as pd
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask
from threading import Thread

# ===== –õ–æ–≥–∏ =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –¢–æ–∫–µ–Ω =====
TOKEN = os.environ.get("TELEGRAM_TOKEN")

# ===== –ú–æ–Ω–µ—Ç—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã =====
AVAILABLE_COINS = ["BTC", "ETH", "SOL", "WLFI", "JELLYJELLY"]
AVAILABLE_TF = ["15m", "1h"]

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====
user_settings = {}  # {user_id: {"auto_signals": True, "coins": ["BTC","ETH"], "timeframes":["15m","1h"]}}

# ===== Flask –¥–ª—è keep-alive =====
app = Flask('')

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=3000)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

# ===== –ö–æ–º–∞–Ω–¥—ã =====
def start(update: Update, context: CallbackContext):
    try:
        user_id = update.effective_user.id
        if user_id not in user_settings:
            user_settings[user_id] = {"auto_signals": True, "coins": ["BTC","ETH"], "timeframes":["15m","1h"]}
        update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø Crypto Signal Bot.\n–ò—Å–ø–æ–ª—å–∑—É–π /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

def settings(update: Update, context: CallbackContext):
    try:
        user_id = update.effective_user.id
        keyboard = [
            [InlineKeyboardButton("–í–∫–ª –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã ‚úÖ", callback_data='auto_on')],
            [InlineKeyboardButton("–í—ã–∫–ª –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã ‚ùå", callback_data='auto_off')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /settings: {e}")

def button_handler(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        query.answer()
        if query.data == "auto_on":
            user_settings[user_id]["auto_signals"] = True
            query.edit_message_text("–ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ")
        elif query.data == "auto_off":
            user_settings[user_id]["auto_signals"] = False
            query.edit_message_text("–ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–∞—Ö: {e}")

# ===== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã =====
def get_price(coin="BTC"):
    try:
        url = f"https://api.binance.com/api/v3/ticker/price?symbol={coin}USDT"
        resp = requests.get(url, timeout=5)
        time.sleep(0.3)
        return float(resp.json()["price"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {coin}: {e}")
        return 0

# ===== RSI =====
def calculate_rsi(prices, period=14):
    try:
        delta = pd.Series(prices).diff()
        gain = delta.clip(lower=0)
        loss = -1*delta.clip(upper=0)
        avg_gain = gain.rolling(period).mean().iloc[-1]
        avg_loss = loss.rolling(period).mean().iloc[-1]
        if avg_loss == 0:
            return 100
        rs = avg_gain / avg_loss
        return 100 - (100 / (1 + rs))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ RSI: {e}")
        return 50

# ===== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ =====
def send_signal(user_id, context: CallbackContext):
    try:
        if user_id not in user_settings:
            return
        coins = user_settings[user_id]["coins"]
        for coin in coins:
            price = get_price(coin)
            # –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ RSI –¥–ª—è —Ç–µ—Å—Ç–∞
            rsi_15m = 22
            rsi_1h = 78
            msg = f"üíπ {coin} (OKX)\n–¶–µ–Ω–∞: {price:.2f}$\nRSI 15m: {rsi_15m}\nRSI 1h: {rsi_1h}\n"
            if rsi_15m <= 25:
                msg += "–°–∏–≥–Ω–∞–ª: –õ–û–ù–ì üìà"
            elif rsi_1h >= 75:
                msg += "–°–∏–≥–Ω–∞–ª: –®–û–†–¢ üìâ"
            else:
                msg += "–°–∏–≥–Ω–∞–ª: –Ω–µ—Ç"
            context.bot.send_message(chat_id=user_id, text=msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")

# ===== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ =====
def start_scheduler(updater: Updater):
    scheduler = BackgroundScheduler()
    for user_id in user_settings.keys():
        scheduler.add_job(send_signal, 'interval', minutes=2, args=[user_id, updater.bot])
    scheduler.start()

# ===== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====
def main():
    keep_alive()  # –ó–∞–ø—É—Å–∫ Flask –¥–ª—è keep-alive

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("settings", settings))
    dp.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling(timeout=10, clean=True)
    start_scheduler(updater)
    updater.idle()

if __name__ == "__main__":
    main()
